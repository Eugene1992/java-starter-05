1. Создать класс other.Employee со следующими параметрами - name, age, salary.
2. Имплементировать интерфейс Comparable<other.Employee>.
3. Реализовать логику переопределенного метода compareTo. Сотрудники
   сортируются по имени, если имена равны - по возрасту, если возраст
   равен - по зврплате.
4. Создать класс DefaultEmployeeComparator. Имплементировать интерфейс
   Comparator<other.Employee>. Реализовать логику переопределенного метода compare.
   Сотрудники сортируются по имени, если имна равны - по возрасту, если
   возраст равен - по зарплате.
5. Создать класс EmployeeByNameComparator. Имплементировать интерфейс
   Comparator<other.Employee>. Реализовать логику переопределенного метода compare.
   Сотрудники сортируются только по имени.
6. В классе other.Employee создать метод main. В нем список List<other.Employee>,
   заполнить его 5 other.Employee.
7. Отсортировать данный список методом Collections.sort(), с помощью
   созданных компораторов, с помощью стандартной сортировки(Comparable) и
   с помощью анонимного класса компоратора, который сортирует по зарплате
   в обратном порядке(от большего к меньшему).



